### git #####

syncfork(){
	git fetch upstream
	git checkout main
	git merge upstream/main
}

alias gs="git status"
alias gd="git diff"
alias gl="git log --oneline --decorate --color"

stash(){
    git stash -u
}

# need this to allow git signing to work
export GPG_TTY=$(tty)

### nav ###
alias cd..='cd ..'
alias ..='cd ..'
alias l='ls -la'

### dev ###
cleanupIdea(){
    rm -r .idea
}

cleanupDir(){
    rm -r $1
}

decode(){
    echo "$1" | base64 -d
}

encode(){
    echo -n "$1" | base64
}

#########       K8s     ########
export f="—force"
export now="—force —grace-period 0"
export do="--dry-run=client -o yaml"
export d="--dry-run=client"
export oy="-o yaml"

alias t=tanzu
alias k=kubectl
alias kn="kubectl config set-context --current --namespace "

source <(kubectl completion bash)
complete -o default -F __start_kubectl k

use(){
    kubectl config use-context $1
}

ns() {
    namespace=$1
    if [ -z $namespace ]; then
        echo "Please provide the namespace name: 'ns tanzu'"
        return 1
    fi

    kubectl config set-context $(kubectl config current-context) --namespace $namespace
}

mergeConfigs(){
    # https://support.tools/post/merge_kubeconfig_files
    cp ~/.kube/config ~/.kube/config_bk && KUBECONFIG=~/.kube/config:$1 kubectl config view --flatten > ~/.kube/config_tmp && mv ~/.kube/config_tmp ~/.kube/config
}

findYttTemplate(){
    image_url=$(kubectl -n tanzu-package-repo-global get packages $1 -o jsonpath='{.spec.template.spec.fetch[0].imgpkgBundle.image}')
    imgpkg pull -b $image_url -o /tmp/$1
    cp /tmp/$1/config/values.yaml $1-data-values.yaml
}

kexec(){
    kubectl exec $1 -it -- sh
}

deleteTerminatingForeverNamespace(){
    NAMESPACE_TO_DELETE=$1
    kubectl get namespace "$NAMESPACE_TO_DELETE" -o json \
    | tr -d "\n" | sed "s/\"finalizers\": \[[^]]\+\]/\"finalizers\": []/" \
    | kubectl replace --raw /api/v1/namespaces/${NAMESPACE_TO_DELETE}/finalize -f -
}

events(){
   kubectl get events --sort-by=".lastTimestamp" $1
}

po(){
    kubectl get po -owide $1
}

dp(){
    for pod in $(kubectl get po | grep -v NAME | cut -f1 -d ' ' | grep $1); do kubectl delete pod/$pod --force; done
}

ep(){
    for pod in $(kubectl get po | grep -v NAME | cut -f1 -d ' ' | grep $1); do echo $pod; done
}

deleteAllPods(){
    for pod in $(kubectl get po | grep -v NAME | cut -f1 -d ' '); do kubectl delete pod/$pod --force; done
}

deleteEvicted(){
    for pod in $(kubectl get po -n $1 | grep -v NAME | grep Evicted | cut -f1 -d ' '); do kubectl delete pod/$pod --force; done
}

deleteAllEvicted(){
    for namespace in $(kubectl get namespace -o json |  jq -r '.items[] .metadata.name') ; do
        deleteEvicted $namespace
    done
}

nodes(){
    kubectl get nodes -owide
}

drain(){
    kubectl drain $1 --ignore-daemonsets --delete-emptydir-data
}

uncordon(){
    kubectl uncordon $1
}

### tap ###

kick(){
    echo "y" | kctrl app kick -a $1 -n tap-install
}

ksync(){
    echo "y" | kctrl app kick -a $1 -n tanzu-sync
}

kicknsp(){
    kick namespace-provisioner || true
    echo "y" | kctrl app kick -a provisioner -n tap-namespace-provisioning
}

gettapvalues(){
    kubectl get secrets tap-install-values  -oyaml -n tap-install -o jsonpath='{.data.tap-values\.yml}' | base64 -d
}

kicktap(){
    echo "y" | kctrl app kick -a tap -n tap-install
}

kickkpack(){
    kubectl -n kpack rollout restart deployment/kpack-controller
}

ktree(){
    k tree -n $1 workload $2
}

dw(){
    local current="$(kubectl config current-context)"
    local currentNamespace="$(kubectl config get-contexts "$current" | awk "/$current/ {print \$5}")"
    tanzu apps workload delete -f config/workload.yaml --namespace $currentNamespace --yes
}

aw(){
    local current="$(kubectl config current-context)"
    local currentNamespace="$(kubectl config get-contexts "$current" | awk "/$current/ {print \$5}")"
    tanzu apps workload apply -f config/workload.yaml --namespace $currentNamespace --yes
}

getwl(){
    kubectl get workload,gitrepository,pipelinerun,images.kpack,podintent,app
}

pause(){
    kubectl patch packageinstall -n tap-install $1 -p '{"spec": {"paused": true}}' --type=merge
}

unpause(){
    kubectl patch packageinstall -n tap-install $1 -p '{"spec": {"paused": false}}' --type=merge
}

pausetap(){
    kubectl patch packageinstall -n tap-install tap -p '{"spec": {"paused": true}}' --type=merge
}

unpausetap(){
    kubectl patch packageinstall -n tap-install tap -p '{"spec": {"paused": false}}' --type=merge
}

essync(){
    tanzu es secrets sync $1
}

synctapvalues(){
    essync "tap-install-values -n tap-install"
}

schema(){
    kubectl get pkgi -n tap-install | grep $1 | awk '{print $2"/"$3}' | xargs -I {} tanzu package available get {} --values-schema --namespace tap-install
}

### aks ###
aksstart(){
    az aks start --name $1 --resource-group $2
}

aksstop(){
    az aks stop --name $1 --resource-group $2
}
